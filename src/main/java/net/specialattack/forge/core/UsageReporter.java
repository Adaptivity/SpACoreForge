package net.specialattack.forge.core;

import cpw.mods.fml.relauncher.Side;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import org.apache.logging.log4j.Level;

public class UsageReporter implements Runnable {

    public final String modId;
    public final String version;
    public final String modpack;
    public final Side side;
    public final File modDir;

    protected UsageReporter(String modId, String version, String modpack, Side side, File modDir) {
        this.modId = modId;
        this.version = version;
        this.modpack = modpack;
        this.side = side;
        this.modDir = modDir;
    }

    @Override
    public void run() {
        HttpURLConnection request = null;

        boolean needsResending;

        try {
            needsResending = this.needsResending();
        } catch (RuntimeException e) {
            return;
        }
        if (needsResending) {
            try {
                request = (HttpURLConnection) new URL("http://dsiwars.x10.mx/files/report_activation.php?mod=" + this.modId + "&version=" + this.version + "&side=" + this.side.ordinal() + "&pack=" + this.modpack).openConnection();
                request.setRequestMethod("GET");
                request.connect();

                if (request.getResponseCode() == 200) {
                    this.rewriteVersion();
                } else {
                    throw new RuntimeException("Server returned HTTP response code " + request.getResponseCode());
                }
            } catch (MalformedURLException e) {
                Objects.log.log(Level.WARN, "Failed reporting activation", e);
            } catch (IOException e) {
                Objects.log.log(Level.WARN, "Failed reporting activation", e);
            } catch (RuntimeException e) {
                Objects.log.log(Level.WARN, "Failed reporting activation: " + e.getMessage());
            } finally {
                if (request != null) {
                    request.disconnect();
                }
            }
        }

        request = null;

        try {
            request = (HttpURLConnection) new URL("http://dsiwars.x10.mx/files/report_launch.php?mod=" + this.modId + "&version=" + this.version + "&side=" + this.side.ordinal() + "&pack=" + this.modpack).openConnection();
            request.setRequestMethod("GET");
            request.connect();

            if (request.getResponseCode() != 200) {
                throw new RuntimeException("Server returned HTTP response code " + request.getResponseCode());
            }
        } catch (Exception e) {
            Objects.log.log(Level.WARN, "Failed reporting activation: " + e.getMessage());
        } finally {
            if (request != null) {
                request.disconnect();
            }
        }
    }

    private boolean needsResending() {
        File file = new File(this.modDir, this.modId + ".version");

        if (!file.exists()) {
            return true;
        }

        BufferedReader in = null;

        try {
            in = new BufferedReader(new FileReader(file));

            String version = in.readLine();

            if (version == null || version.isEmpty()) {
                return true;
            }
            if (version.equals("DEBUG")) {
                throw new RuntimeException("Running in dev environment");
            }
            if (!version.equals(this.version)) {
                return true;
            }

            String path = in.readLine();

            return path == null || path.isEmpty() || !path.equals(file.getAbsolutePath());
        } catch (IOException e) {
            return true;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
    }

    private void rewriteVersion() {
        File file = new File(this.modDir, this.modId + ".version");

        BufferedWriter out = null;

        try {
            if (!file.exists()) {
                file.createNewFile();
            }

            out = new BufferedWriter(new FileWriter(file));

            out.write(this.version);
            out.write("\r\n");
            out.write(file.getAbsolutePath());
            out.write("\r\n");
            out.write("# Please do not edit this file, nor ship it with any modpack, it is used to determine how many people activate this mod");
        } catch (IOException e) {
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                }
            }
        }
    }

}
